1)  Describe how you would accomplish updating 100+ devices with the
same firmware.

    I would try to get a list of all devices that need the update.
    Then I would split the list into multiple, smaller lists and run a Python script for each list.

    This should update multiple devices at around the same time,
    but it'll be resource-intensive due to running multiple scripts at the same time.


2)  Imagine the devices respond to messages over a different channel than
an HTTP response. For example, imagine the server responds to every
valid message to a device with HTTP 200, and the device's actual
response arrives asynchronously over a websocket. What architecture
would you use?

    In this case, it sounds like websockets would be the way to go for handling messages and responses.
    If the HTTP response only contains the status code 200 and the websockets contain the actual data,
    then designing the code to handle websocket responses seems like the obvious thing to do.


3)  In addition to updating the firmware for 100+ devices, imagine each
device takes âˆ¼30 seconds to respond to each message. Would this
change anything?

    This will greatly increase the amount of time it takes to update each device,
    and make it more difficult to update all devices in a timely manner.
    Timeouts and lost connection errors would only make updating more difficult.

    The script for uploading firmware updates might need to make some adjustments to handle this;
    maybe with the use of spin locks or semaphores as a way to wait for responses.
    That should handle any timeouts or connection issues but it won't make it any faster.


4)  Imagine that in addition to performing firmware updates to devices
over a REST endpoint, you also need to communicate with devices
over other protocols like MQTT, CoAP, or a custom protocol over
TCP. How could your design accommodate this?

    I feel that there might be a need for multiple scripts,
    each responsible for a different protocol and handling firmware updates.
    Then it'll be all tied together in a sort of master script that identifies which protocol to use
    and executes the correct script accordingly.

    This should avoid having one script handle everything,
    but the complexity of the project will shoot up quickly.